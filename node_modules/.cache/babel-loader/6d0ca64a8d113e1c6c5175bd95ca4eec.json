{"ast":null,"code":"var MACHINE_ID = Math.floor(Math.random() * 0xFFFFFF);\nvar index = ObjectID.index = parseInt(Math.random() * 0xFFFFFF, 10);\nvar pid = (typeof process === 'undefined' || typeof process.pid !== 'number' ? Math.floor(Math.random() * 100000) : process.pid) % 0xFFFF;\n/**\n * Determine if an object is Buffer\n *\n * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * License:  MIT\n *\n */\n\nvar isBuffer = function isBuffer(obj) {\n  return !!(obj != null && obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj));\n};\n/**\n * Create a new immutable ObjectID instance\n *\n * @class Represents the BSON ObjectID type\n * @param {String|Number} arg Can be a 24 byte hex string, 12 byte binary string or a Number.\n * @return {Object} instance of ObjectID.\n */\n\n\nfunction ObjectID(arg) {\n  if (!(this instanceof ObjectID)) return new ObjectID(arg);\n  if (arg && (arg instanceof ObjectID || arg._bsontype === \"ObjectID\")) return arg;\n  var buf;\n\n  if (isBuffer(arg) || Array.isArray(arg) && arg.length === 12) {\n    buf = Array.prototype.slice.call(arg);\n  } else if (typeof arg === \"string\") {\n    if (arg.length !== 12 && !ObjectID.isValid(arg)) throw new Error(\"Argument passed in must be a single String of 12 bytes or a string of 24 hex characters\");\n    buf = buffer(arg);\n  } else if (/number|undefined/.test(typeof arg)) {\n    buf = buffer(generate(arg));\n  }\n\n  Object.defineProperty(this, \"id\", {\n    enumerable: true,\n    get: function get() {\n      return String.fromCharCode.apply(this, buf);\n    }\n  });\n  Object.defineProperty(this, \"str\", {\n    get: function get() {\n      return buf.map(hex.bind(this, 2)).join('');\n    }\n  });\n}\n\nmodule.exports = ObjectID;\nObjectID.generate = generate;\nObjectID.default = ObjectID;\n/**\n * Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.\n *\n * @param {Number} time an integer number representing a number of seconds.\n * @return {ObjectID} return the created ObjectID\n * @api public\n */\n\nObjectID.createFromTime = function (time) {\n  time = parseInt(time, 10) % 0xFFFFFFFF;\n  return new ObjectID(hex(8, time) + \"0000000000000000\");\n};\n/**\n * Creates an ObjectID from a hex string representation of an ObjectID.\n *\n * @param {String} hexString create a ObjectID from a passed in 24 byte hexstring.\n * @return {ObjectID} return the created ObjectID\n * @api public\n */\n\n\nObjectID.createFromHexString = function (hexString) {\n  if (!ObjectID.isValid(hexString)) throw new Error(\"Invalid ObjectID hex string\");\n  return new ObjectID(hexString);\n};\n/**\n * Checks if a value is a valid bson ObjectId\n *\n * @param {String} objectid Can be a 24 byte hex string or an instance of ObjectID.\n * @return {Boolean} return true if the value is a valid bson ObjectID, return false otherwise.\n * @api public\n *\n * THE NATIVE DOCUMENTATION ISN'T CLEAR ON THIS GUY!\n * http://mongodb.github.io/node-mongodb-native/api-bson-generated/objectid.html#objectid-isvalid\n */\n\n\nObjectID.isValid = function (objectid) {\n  if (!objectid) return false; //call .toString() to get the hex if we're\n  // working with an instance of ObjectID\n\n  return /^[0-9A-F]{24}$/i.test(objectid.toString());\n};\n/**\n * set a custom machineID\n * \n * @param {String|Number} machineid Can be a string, hex-string or a number\n * @return {void}\n * @api public\n */\n\n\nObjectID.setMachineID = function (arg) {\n  var machineID;\n\n  if (typeof arg === \"string\") {\n    // hex string\n    machineID = parseInt(arg, 16); // any string\n\n    if (isNaN(machineID)) {\n      arg = ('000000' + arg).substr(-7, 6);\n      machineID = \"\";\n\n      for (var i = 0; i < 6; i++) {\n        machineID += arg.charCodeAt(i);\n      }\n    }\n  } else if (/number|undefined/.test(typeof arg)) {\n    machineID = arg | 0;\n  }\n\n  MACHINE_ID = machineID & 0xFFFFFF;\n};\n/**\n * get the machineID\n * \n * @return {number}\n * @api public\n */\n\n\nObjectID.getMachineID = function () {\n  return MACHINE_ID;\n};\n\nObjectID.prototype = {\n  _bsontype: 'ObjectID',\n  constructor: ObjectID,\n\n  /**\n   * Return the ObjectID id as a 24 byte hex string representation\n   *\n   * @return {String} return the 24 byte hex string representation.\n   * @api public\n   */\n  toHexString: function toHexString() {\n    return this.str;\n  },\n\n  /**\n   * Compares the equality of this ObjectID with `otherID`.\n   *\n   * @param {Object} other ObjectID instance to compare against.\n   * @return {Boolean} the result of comparing two ObjectID's\n   * @api public\n   */\n  equals: function equals(other) {\n    return !!other && this.str === other.toString();\n  },\n\n  /**\n   * Returns the generation date (accurate up to the second) that this ID was generated.\n   *\n   * @return {Date} the generation date\n   * @api public\n   */\n  getTimestamp: function getTimestamp() {\n    return new Date(parseInt(this.str.substr(0, 8), 16) * 1000);\n  }\n};\n\nfunction next() {\n  return index = (index + 1) % 0xFFFFFF;\n}\n\nfunction generate(time) {\n  if (typeof time !== 'number') time = Date.now() / 1000; //keep it in the ring!\n\n  time = parseInt(time, 10) % 0xFFFFFFFF; //FFFFFFFF FFFFFF FFFF FFFFFF\n\n  return hex(8, time) + hex(6, MACHINE_ID) + hex(4, pid) + hex(6, next());\n}\n\nfunction hex(length, n) {\n  n = n.toString(16);\n  return n.length === length ? n : \"00000000\".substring(n.length, length) + n;\n}\n\nfunction buffer(str) {\n  var i = 0,\n      out = [];\n  if (str.length === 24) for (; i < 24; out.push(parseInt(str[i] + str[i + 1], 16)), i += 2) {\n    ;\n  } else if (str.length === 12) for (; i < 12; out.push(str.charCodeAt(i)), i++) {\n    ;\n  }\n  return out;\n}\n/**\n * Converts to a string representation of this Id.\n *\n * @return {String} return the 24 byte hex string representation.\n * @api private\n */\n\n\nObjectID.prototype.inspect = function () {\n  return \"ObjectID(\" + this + \")\";\n};\n\nObjectID.prototype.toJSON = ObjectID.prototype.toHexString;\nObjectID.prototype.toString = ObjectID.prototype.toHexString;","map":null,"metadata":{},"sourceType":"script"}